// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  referral_code String?
  joined_at     DateTime @default(now())
  first_name    String?
  last_name     String?
  dob           BigInt?
  phone_number  String?
  bvn           String?  @unique
  auth_token    String?  @unique
  username      String?  @unique
  trx_pin       String?

  budgets                   Budget[]
  transactions              Transaction[]
  beneficiaries_as_owner    Beneficiary[]  @relation("UserAsOwner")
  beneficiaries_as_receiver Beneficiary[]  @relation("UserAsReceiver")
  sent_transfers            UserTransfer[] @relation("UserSentTransfers")
  received_transfers        UserTransfer[] @relation("UserReceivedTransfers")
  bank_accounts             BankAccount[]
  virtual_cards             VirtualCard[]
}

model Beneficiary {
  id             Int @id @default(autoincrement())
  owner_id       Int
  beneficiary_id Int

  owner       User @relation("UserAsOwner", fields: [owner_id], references: [id])
  beneficiary User @relation("UserAsReceiver", fields: [beneficiary_id], references: [id])
}

model Budget {
  id         Int          @id @default(autoincrement())
  user_id    Int
  name       String?      @unique
  amount     Decimal?     @db.Decimal(15, 2)
  spent      Decimal?     @db.Decimal(15, 2)
  remaining  Decimal?     @db.Decimal(15, 2)
  cycle      String?
  created_at DateTime     @default(now())
  start_date DateTime?
  end_date   DateTime?
  pay_freq   String?
  stipend    Decimal?     @db.Decimal(10, 2)
  settings   Json?
  status     BudgetStatus

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model Transaction {
  id          Int               @id @default(autoincrement())
  user_id     Int
  amount      Decimal           @db.Decimal(15, 2)
  currency    String            @default("NGN")
  type        TransactionType
  category    String? // e.g., "Funding", "Inflow", "Outflow"
  description String?
  reference   String?           @unique
  status      TransactionStatus
  created_at  DateTime          @default(now())
  updated_at  DateTime

  user          User                 @relation(fields: [user_id], references: [id])
  user_transfer UserTransfer?
  bank_transfer BankTransfer?
  card_transfer VirtualCardTransfer?

  @@index([user_id])
}

model UserTransfer {
  id             Int         @id @default(autoincrement())
  transaction_id Int         @unique
  recipient_id   Int
  sender_id      Int
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  recipient      User        @relation("UserReceivedTransfers", fields: [recipient_id], references: [id])
  sender         User        @relation("UserSentTransfers", fields: [sender_id], references: [id])
}

model BankAccount {
  id         Int            @id @default(autoincrement())
  account_no String
  bank_name  String
  owner_id   Int
  user       User           @relation(fields: [owner_id], references: [id])
  transfers  BankTransfer[]
}

model VirtualCard {
  id          Int                   @id @default(autoincrement())
  card_number String
  expiry_date DateTime
  owner_id    Int
  user        User                  @relation(fields: [owner_id], references: [id])
  transfers   VirtualCardTransfer[]
}

model BankTransfer {
  id              Int @id @default(autoincrement())
  transaction_id  Int @unique
  bank_account_id Int

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  bankAccount BankAccount @relation(fields: [bank_account_id], references: [id])
}

model VirtualCardTransfer {
  id              Int @id @default(autoincrement())
  transaction_id  Int @unique
  virtual_card_id Int

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  virtualCard VirtualCard @relation(fields: [virtual_card_id], references: [id])
}

model Otp {
  id         Int      @id @default(autoincrement())
  medium     String?
  code       String
  created_at DateTime @default(now())
  expires_at DateTime

  @@index([medium])
}

enum TransactionType {
  FUND_BUDGET
  EXPENSE
  ROLLOVER
  SEND_TO_USER
  SEND_TO_BANK
  SEND_TO_CARD
  FUND_WALLET
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum BudgetStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}
